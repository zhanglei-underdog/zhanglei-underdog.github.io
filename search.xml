<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Jetson上融合yolov5目标检测与双目摄像头测距</title>
      <link href="/2021/10/13/%E5%9C%A8Jetson%E4%B8%8A%E8%9E%8D%E5%90%88yolov5%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%B5%8B%E8%B7%9D/"/>
      <url>/2021/10/13/%E5%9C%A8Jetson%E4%B8%8A%E8%9E%8D%E5%90%88yolov5%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8F%8C%E7%9B%AE%E6%91%84%E5%83%8F%E5%A4%B4%E6%B5%8B%E8%B7%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="在Jetson上融合yolov5目标检测与双目摄像头测距"><a href="#在Jetson上融合yolov5目标检测与双目摄像头测距" class="headerlink" title="在Jetson上融合yolov5目标检测与双目摄像头测距"></a>在Jetson上融合yolov5目标检测与双目摄像头测距</h1><p>这几天都在做摄像头双目测距与yolov5识别的内容。主要想实现的功能是，将yolov5识别的物体，标注出距离左右摄像头的距离。到今天下午，已经可以实时处理USB双目摄像头采集的图像。在这里将相关的过程记录下来，以免遗忘。</p><h2 id="双目测距过程"><a href="#双目测距过程" class="headerlink" title="双目测距过程"></a>双目测距过程</h2><h3 id="使用Matlab进行双目标定"><a href="#使用Matlab进行双目标定" class="headerlink" title="使用Matlab进行双目标定"></a>使用Matlab进行双目标定</h3><h4 id="双目摄像头"><a href="#双目摄像头" class="headerlink" title="双目摄像头"></a>双目摄像头</h4><p>用的摄像头的uvc免驱的摄像头，这是非常爽的，插在nano的USB口上就可以使用，驱动yoloV5之后，效果如图</p><p><img src="/articleImg/18_article/yolo.png" alt="yolo"></p><ul><li><p>插入摄像头之后查看信息所需要的相关命令：<br/></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 窗口下输入</span></span><br><span class="line">lsusb    <span class="comment"># 查看已存在的USB设备资源</span></span><br><span class="line">cat /dev/video*  <span class="comment"># 查看有几个摄像头设备 /dev/video0 代表0号摄像头   /dev/video1 代表1号摄像头 </span></span><br><span class="line"><span class="comment"># 主要也就是这两条命令来确认你的uvc免驱摄像头能不能使用</span></span><br></pre></td></tr></table></figure></li><li><p>确认可以使用后，肯定要驱动显示图像才好啊，下面给出我用的摄像头驱动显示代码<br/></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">AUTO = <span class="literal">False</span>  <span class="comment"># 自动拍照，或手动按s键拍照</span></span><br><span class="line">INTERVAL = <span class="number">2</span> <span class="comment"># 自动拍照间隔</span></span><br><span class="line"> </span><br><span class="line">cv2.namedWindow(<span class="string">&quot;left&quot;</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;right&quot;</span>)</span><br><span class="line">camera = cv2.VideoCapture(<span class="number">0</span>)  <span class="comment"># 用几号摄像头就设置为几</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置分辨率 左右摄像机同一频率，同一设备ID；左右摄像机总分辨率1280x480；分割为两个640x480、640x480</span></span><br><span class="line">camera.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH,<span class="number">1280</span>)</span><br><span class="line">camera.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT,<span class="number">480</span>)</span><br><span class="line"> </span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line">utc = time.time()</span><br><span class="line">folder = <span class="string">&quot;./SaveImage/&quot;</span> <span class="comment"># 拍照文件目录</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shot</span>(<span class="params">pos, frame</span>):</span></span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    path = folder + pos + <span class="string">&quot;_&quot;</span> + <span class="built_in">str</span>(counter) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line"> </span><br><span class="line">    cv2.imwrite(path, frame)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;snapshot saved into: &quot;</span> + path)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = camera.read()</span><br><span class="line">    <span class="comment"># 裁剪坐标为[y0:y1, x0:x1] HEIGHT*WIDTH</span></span><br><span class="line">    left_frame = frame[<span class="number">0</span>:<span class="number">480</span>, <span class="number">0</span>:<span class="number">640</span>]</span><br><span class="line">    right_frame = frame[<span class="number">0</span>:<span class="number">480</span>, <span class="number">640</span>:<span class="number">1280</span>]</span><br><span class="line"> </span><br><span class="line">    cv2.imshow(<span class="string">&quot;left&quot;</span>, left_frame)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;right&quot;</span>, right_frame)</span><br><span class="line"> </span><br><span class="line">    now = time.time()</span><br><span class="line">    <span class="keyword">if</span> AUTO <span class="keyword">and</span> now - utc &gt;= INTERVAL:</span><br><span class="line">        shot(<span class="string">&quot;left&quot;</span>, left_frame)</span><br><span class="line">        shot(<span class="string">&quot;right&quot;</span>, right_frame)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        utc = now</span><br><span class="line"> </span><br><span class="line">    key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> key == <span class="built_in">ord</span>(<span class="string">&quot;q&quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> key == <span class="built_in">ord</span>(<span class="string">&quot;s&quot;</span>):</span><br><span class="line">        shot(<span class="string">&quot;left&quot;</span>, left_frame)</span><br><span class="line">        shot(<span class="string">&quot;right&quot;</span>, right_frame)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">camera.release()</span><br><span class="line">cv2.destroyWindow(<span class="string">&quot;left&quot;</span>)</span><br><span class="line">cv2.destroyWindow(<span class="string">&quot;right&quot;</span>)</span><br></pre></td></tr></table></figure><p>对双目摄像头的测试就到此为止了。</p></li></ul><h4 id="双目测距基本流程"><a href="#双目测距基本流程" class="headerlink" title="双目测距基本流程"></a><strong>双目测距基本流程</strong></h4><p>主要参考自 CSDN博主 ： <a href="https://blog.csdn.net/dulingwen">dulingwen</a></p><p>结起来，双目测距的大致流程如下：</p><p><img src="/articleImg/18_article/biaoding.png" alt="biaoding"></p><p>  在这里贴出代码，由于PCL库比较难装，这里将博主代码中的点云部分全部注释<br/></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> stereo.dianyuntu_yolo <span class="keyword">import</span> preprocess, undistortion, getRectifyTransform, draw_line, rectifyImage,\</span><br><span class="line">     stereoMatchSGBM, hw3ToN3</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> stereo <span class="keyword">import</span> stereoconfig_040_2</span><br><span class="line"></span><br><span class="line">image_width = <span class="number">1280</span> / <span class="number">2</span></span><br><span class="line">image_height = <span class="number">480</span></span><br><span class="line">skip_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">detect():</span><br><span class="line">    <span class="comment"># .......将该段代码放在yolo代码中的 # Add bbox to image下</span></span><br><span class="line">     <span class="comment"># -----------------------------------------------------zl 9.15</span></span><br><span class="line">                        <span class="comment"># 识别框上中点坐标</span></span><br><span class="line">                        x = (xyxy[<span class="number">0</span>] + xyxy[<span class="number">2</span>]) / <span class="number">2</span></span><br><span class="line">                        y = (xyxy[<span class="number">1</span>] + xyxy[<span class="number">3</span>]) / <span class="number">2</span></span><br><span class="line">                        <span class="comment">#print(&quot; %s is  x: %d y: %d &quot; %(label,x,y) )</span></span><br><span class="line">                        skip_flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">if</span> (x &lt;= <span class="number">1280</span>):</span><br><span class="line">                            t3 = time_synchronized()</span><br><span class="line">    </span><br><span class="line">                            <span class="comment">################################</span></span><br><span class="line">                            <span class="comment">#stereo code</span></span><br><span class="line">                            p = <span class="string">&quot;test&quot;</span></span><br><span class="line">                            string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                            <span class="comment">#print(&quot;P is %d&quot; %p )</span></span><br><span class="line">                            <span class="comment"># 读取数据集的图片</span></span><br><span class="line">                            <span class="comment">#iml = cv2.imread(&#x27;./stereo/yolo/zuo/%szuo%d.bmp&#x27; %(string,p) )  # 左图</span></span><br><span class="line">                            <span class="comment">#imr = cv2.imread(&#x27;./stereo/yolo/you/%syou%d.bmp&#x27; %(string,p) )  # 右图</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">#iml = cv2.imread(&#x27;./stereo/yolo/zuo/%szuo%d.bmp&#x27; %(string,p) )  # 左图</span></span><br><span class="line">                            <span class="comment">#imr = cv2.imread(&#x27;./stereo/yolo/you/%syou%d.bmp&#x27; %(string,p) )  # 右图</span></span><br><span class="line">                            </span><br><span class="line">                            height_0, width_0 = im0.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">                            <span class="comment">#print(&quot;width_0 =  %d &quot;  % width_0)</span></span><br><span class="line">                            <span class="comment">#print(&quot;height_0 = %d &quot;  % height_0)</span></span><br><span class="line"></span><br><span class="line">                            width_1 = width_0/<span class="number">2</span></span><br><span class="line">                            iml = im0[<span class="number">0</span>:<span class="built_in">int</span>(height_0), <span class="number">0</span>:<span class="built_in">int</span>(width_0/<span class="number">2</span>)]</span><br><span class="line">                            imr = im0[<span class="number">0</span>:<span class="built_in">int</span>(height_0), <span class="built_in">int</span>(width_0/<span class="number">2</span>):<span class="built_in">int</span>(width_0) ]</span><br><span class="line"></span><br><span class="line">                            height, width = iml.shape[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">                            <span class="comment">#cv2.imshow(&quot;iml&quot;,iml)</span></span><br><span class="line">                            <span class="comment">#cv2.imshow(&quot;imr&quot;,im0)</span></span><br><span class="line">                            <span class="comment">#cv2.waitKey(0)</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">#print(&quot;width =  %d &quot;  % width)</span></span><br><span class="line">                            <span class="comment">#print(&quot;height = %d &quot;  % height)</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 读取相机内参和外参</span></span><br><span class="line">                            config = stereoconfig_040_2.stereoCamera()</span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 立体校正</span></span><br><span class="line">                            map1x, map1y, map2x, map2y, Q = getRectifyTransform(height, width, config)  <span class="comment"># 获取用于畸变校正和立体校正的映射矩阵以及用于计算像素空间坐标的重投影矩阵</span></span><br><span class="line">                            <span class="comment">#print(&quot;Print Q!&quot;)</span></span><br><span class="line">                            <span class="comment">#print(&quot;Q[2,3]:%.3f&quot;%Q[2,3])</span></span><br><span class="line">                            iml_rectified, imr_rectified = rectifyImage(iml, imr, map1x, map1y, map2x, map2y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                </span><br><span class="line">                            <span class="comment"># 绘制等间距平行线，检查立体校正的效果</span></span><br><span class="line">                            line = draw_line(iml_rectified, imr_rectified)</span><br><span class="line">                            <span class="comment">#cv2.imwrite(&#x27;./yolo/%s检验%d.png&#x27; %(string,p), line)</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 消除畸变</span></span><br><span class="line">                            iml = undistortion(iml, config.cam_matrix_left, config.distortion_l)</span><br><span class="line">                            imr = undistortion(imr, config.cam_matrix_right, config.distortion_r)</span><br><span class="line">                        </span><br><span class="line">                            <span class="comment"># 立体匹配</span></span><br><span class="line">                            iml_, imr_ = preprocess(iml, imr)  <span class="comment"># 预处理，一般可以削弱光照不均的影响，不做也可以</span></span><br><span class="line"></span><br><span class="line">                            iml_rectified_l, imr_rectified_r = rectifyImage(iml_, imr_, map1x, map1y, map2x, map2y)</span><br><span class="line">                            </span><br><span class="line">                            disp, _ = stereoMatchSGBM(iml_rectified_l, imr_rectified_r, <span class="literal">True</span>) </span><br><span class="line">                            <span class="comment">#cv2.imwrite(&#x27;./yolo/%s视差%d.png&#x27; %(string,p), disp)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="comment"># 计算像素点的3D坐标（左相机坐标系下）</span></span><br><span class="line">                            points_3d = cv2.reprojectImageTo3D(disp, Q)  <span class="comment"># 可以使用上文的stereo_config.py给出的参数</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">#points_3d = points_3d</span></span><br><span class="line"></span><br><span class="line">                            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                            #print(&quot;x is :%.3f&quot; %points_3d[int(y), int(x), 0] )</span></span><br><span class="line"><span class="string">                                print(&#x27;点 (%d, %d) 的三维坐标 (x:%.3fcm, y:%.3fcm, z:%.3fcm)&#x27; % (int(x), int(y), </span></span><br><span class="line"><span class="string">                                points_3d[int(y), int(x), 0]/10, </span></span><br><span class="line"><span class="string">                                points_3d[int(y), int(x), 1]/10, </span></span><br><span class="line"><span class="string">                                points_3d[int(y), int(x), 2]/10) )</span></span><br><span class="line"><span class="string">                            &#x27;&#x27;&#x27;</span></span><br><span class="line">                            count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="comment">#try:  暂时关闭</span></span><br><span class="line">                            <span class="comment"># points_3d = points_3d.numpy()</span></span><br><span class="line">                            <span class="built_in">print</span>(points_3d.shape)</span><br><span class="line">                            <span class="comment"># print(&quot;x的值为：&quot;,x , &quot;  y的值为：&quot;, y)</span></span><br><span class="line">                            <span class="keyword">if</span>(x &lt; image_width <span class="keyword">and</span> x &gt;= <span class="number">0</span> <span class="keyword">and</span> y&lt; image_height <span class="keyword">and</span> y&gt;=<span class="number">0</span>):</span><br><span class="line">                                <span class="keyword">while</span>( (points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>] &lt; <span class="number">0</span>) | (points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>] &gt; <span class="number">2500</span>) ):</span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># print(&quot;x的值为：&quot;,x , &quot;  y的值为：&quot;, y)</span></span><br><span class="line"></span><br><span class="line">                                    count += <span class="number">1</span></span><br><span class="line">                                    x += count</span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># 个人添加判断程序，x y的值一旦发生更新就需要进行判断</span></span><br><span class="line">                                    <span class="keyword">if</span>(x &gt;= image_width <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y&gt;= image_height <span class="keyword">or</span> y&lt;<span class="number">0</span>):</span><br><span class="line">                                        skip_flag = <span class="literal">True</span></span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span>( <span class="number">0</span> &lt; points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>] &lt; <span class="number">2300</span> ):</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    y += count</span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># 个人添加判断程序，x y的值一旦发生更新就需要进行判断</span></span><br><span class="line">                                    <span class="keyword">if</span>(x &gt;= image_width <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y&gt;= image_height <span class="keyword">or</span> y&lt;<span class="number">0</span>):</span><br><span class="line">                                        skip_flag = <span class="literal">True</span></span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span>( <span class="number">0</span> &lt; points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>] &lt; <span class="number">2300</span> ):</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    count += <span class="number">1</span></span><br><span class="line">                                    x -= count</span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># 个人添加判断程序，x y的值一旦发生更新就需要进行判断</span></span><br><span class="line">                                    <span class="keyword">if</span>(x &gt;= image_width <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y&gt;= image_height <span class="keyword">or</span> y&lt;<span class="number">0</span>):</span><br><span class="line">                                        skip_flag = <span class="literal">True</span></span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span>( <span class="number">0</span> &lt; points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>] &lt; <span class="number">2300</span> ):</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">                                    y -= count</span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># 个人添加判断程序，x y的值一旦发生更新就需要进行判断</span></span><br><span class="line">                                    <span class="keyword">if</span>(x &gt;= image_width <span class="keyword">or</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y&gt;= image_height <span class="keyword">or</span> y&lt;<span class="number">0</span>):</span><br><span class="line">                                        skip_flag = <span class="literal">True</span></span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span>( <span class="number">0</span> &lt; points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>] &lt; <span class="number">2300</span> ):</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                                    <span class="comment">#if(count%2==1):</span></span><br><span class="line">                                     <span class="comment">#   x += 1</span></span><br><span class="line">                                    <span class="comment">#else:</span></span><br><span class="line">                                    <span class="comment">#    y += 1</span></span><br><span class="line"></span><br><span class="line">                                </span><br><span class="line">        </span><br><span class="line">                                <span class="keyword">if</span>(~skip_flag):</span><br><span class="line">                                    text_cxy = <span class="string">&quot;*&quot;</span></span><br><span class="line">                                    cv2.putText(im0, text_cxy, (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)) ,  cv2.FONT_ITALIC, <span class="number">1.2</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">#tl = round(0.02 * (img.shape[0] + img.shape[1]) / 2) + 1  # line/font thickness</span></span><br><span class="line">                                    <span class="comment">#tf = max(tl - 1, 1)  # font thickness</span></span><br><span class="line">                                    <span class="comment">#cv2.putText(im0, text_cxy,  (int(x), int(y)), 0, tl / 3, [0, 0, 255], thickness=tf, lineType=cv2.LINE_AA)</span></span><br><span class="line">                                    </span><br><span class="line">                                    <span class="comment">#print(&quot;count is %d&quot; %count)</span></span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&#x27;点 (%d, %d) 的三维坐标 (x:%.1fcm, y:%.1fcm, z:%.1fcm)&#x27;</span> % (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y), </span><br><span class="line">                                        points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">0</span>]/<span class="number">10</span>, </span><br><span class="line">                                        points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">1</span>]/<span class="number">10</span>, </span><br><span class="line">                                        points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>]/<span class="number">10</span>) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                    dis = ( (points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">0</span>] ** <span class="number">2</span> + points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">1</span>] ** <span class="number">2</span> + points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>] **<span class="number">2</span>) ** <span class="number">0.5</span> ) / <span class="number">10</span></span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">&#x27;点 (%d, %d) 的 %s 距离左摄像头的相对距离为 %0.1f cm&#x27;</span> %(x, y,label, dis) )</span><br><span class="line">                                </span><br><span class="line">                                    <span class="comment">#label = f&#x27;&#123;names[int(cls)]&#125; &#123;conf:.2f&#125; &#x27;</span></span><br><span class="line">                                    <span class="comment">#plot_one_box(xyxy, im0, label=label+ &#x27;x:%.2f y:%.2f z:%.2f&#x27; </span></span><br><span class="line">                                    <span class="comment">#                           %(points_3d[int(y), int(x), 0]/10, </span></span><br><span class="line">                                    <span class="comment">#                             points_3d[int(y), int(x), 1]/10 ,  </span></span><br><span class="line">                                    <span class="comment">#                             points_3d[int(y), int(x), 2]/10) , </span></span><br><span class="line">                                    <span class="comment">#                             color=colors[int(cls)], line_thickness=3)</span></span><br><span class="line"></span><br><span class="line">                                    text_x = <span class="string">&quot;x:%.1fcm&quot;</span> %(points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">0</span>]/<span class="number">10</span>)</span><br><span class="line">                                    text_y = <span class="string">&quot;y:%.1fcm&quot;</span> %(points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">1</span>]/<span class="number">10</span>)</span><br><span class="line">                                    text_z = <span class="string">&quot;z:%.1fcm&quot;</span> %(points_3d[<span class="built_in">int</span>(y), <span class="built_in">int</span>(x), <span class="number">2</span>]/<span class="number">10</span>)</span><br><span class="line">                                    text_dis = <span class="string">&quot;dis:%.1fcm&quot;</span> %dis</span><br><span class="line"></span><br><span class="line">                                    cv2.rectangle(im0,(<span class="built_in">int</span>(xyxy[<span class="number">0</span>]+(xyxy[<span class="number">2</span>]-xyxy[<span class="number">0</span>])),<span class="built_in">int</span>(xyxy[<span class="number">1</span>])),(<span class="built_in">int</span>(xyxy[<span class="number">0</span>]+(xyxy[<span class="number">2</span>]-xyxy[<span class="number">0</span>])+<span class="number">5</span>+<span class="number">220</span>),<span class="built_in">int</span>(xyxy[<span class="number">1</span>]+<span class="number">150</span>)),colors[<span class="built_in">int</span>(cls)],-<span class="number">1</span>);</span><br><span class="line">                                    cv2.putText(im0, text_x, (<span class="built_in">int</span>(xyxy[<span class="number">0</span>]+(xyxy[<span class="number">2</span>]-xyxy[<span class="number">0</span>])+<span class="number">5</span>), <span class="built_in">int</span>(xyxy[<span class="number">1</span>]+<span class="number">30</span>)),  cv2.FONT_ITALIC, <span class="number">1.2</span>, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">                                    cv2.putText(im0, text_y, (<span class="built_in">int</span>(xyxy[<span class="number">0</span>]+(xyxy[<span class="number">2</span>]-xyxy[<span class="number">0</span>])+<span class="number">5</span>), <span class="built_in">int</span>(xyxy[<span class="number">1</span>]+<span class="number">65</span>)),  cv2.FONT_ITALIC, <span class="number">1.2</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">                                    cv2.putText(im0, text_z, (<span class="built_in">int</span>(xyxy[<span class="number">0</span>]+(xyxy[<span class="number">2</span>]-xyxy[<span class="number">0</span>])+<span class="number">5</span>), <span class="built_in">int</span>(xyxy[<span class="number">1</span>]+<span class="number">100</span>)), cv2.FONT_ITALIC, <span class="number">1.2</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">                                    cv2.putText(im0, text_dis, (<span class="built_in">int</span>(xyxy[<span class="number">0</span>]+(xyxy[<span class="number">2</span>]-xyxy[<span class="number">0</span>])+<span class="number">5</span>), <span class="built_in">int</span>(xyxy[<span class="number">1</span>]+<span class="number">145</span>)), cv2.FONT_ITALIC, <span class="number">1.2</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">#cv2.putText(im0, text_x, (xyxy[0]+(xyxy[2]-xyxy[0])+5, xyxy[1]+30),  cv2.FONT_ITALIC, 1, (102, 80, 250), 3)</span></span><br><span class="line">                                    <span class="comment">#cv2.putText(im0, text_y, (xyxy[0]+(xyxy[2]-xyxy[0])+5, xyxy[1]+65),  cv2.FONT_ITALIC, 1, (102, 80, 250), 3)</span></span><br><span class="line">                                    <span class="comment">#cv2.putText(im0, text_z, (xyxy[0]+(xyxy[2]-xyxy[0])+5, xyxy[1]+100), cv2.FONT_ITALIC, 1, (102, 80, 250), 3)</span></span><br><span class="line">                                    <span class="comment">#cv2.putText(im0, text_dis, (xyxy[0]+(xyxy[2]-xyxy[0])+5, xyxy[1]+145), cv2.FONT_ITALIC, 1, (102, 80, 250), 3)</span></span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># cv2.imshow(&quot;img&amp;coor&quot;, im0)</span></span><br><span class="line">                                    <span class="comment"># 鼠标点击事件</span></span><br><span class="line">                                    <span class="comment">#def onMouse(event, x, y, flags, param):</span></span><br><span class="line">                                    <span class="comment">#    if event == cv2.EVENT_LBUTTONDOWN:</span></span><br><span class="line">                                    <span class="comment">#        print(&#x27;点 (%d, %d) 的三维坐标 (x:%.3fm, y:%.3fm, z:%.3fm)&#x27; % (x, y, points_3d[y, x, 0]/1000, points_3d[y, x, 1]/1000, points_3d[y, x, 2]/1000))</span></span><br><span class="line">                                    <span class="comment">#        dis = ( (points_3d[y, x, 0] ** 2 + points_3d[y, x, 1] ** 2 + points_3d[y, x, 2] **2) ** 0.5) / 1000</span></span><br><span class="line">                                    <span class="comment">#        print(&#x27;点 (%d, %d) 距离左摄像头的相对距离为 %0.3f m&#x27; %(x, y, dis) )</span></span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># 显示图片</span></span><br><span class="line">                                    <span class="comment">#cv2.namedWindow(&quot;disparity&quot;,0)</span></span><br><span class="line">                                    <span class="comment">#cv2.imshow(&quot;disparity&quot;, disp)</span></span><br><span class="line">                                    <span class="comment">#cv2.setMouseCallback(&quot;disparity&quot;, onMouse, 0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># 构建点云--Point_XYZRGBA格式</span></span><br><span class="line">                                    <span class="comment">#pointcloud = DepthColor2Cloud(points_3d, iml)</span></span><br><span class="line"></span><br><span class="line">                                    <span class="comment"># 显示点云</span></span><br><span class="line">                                    <span class="comment">#view_cloud(pointcloud)</span></span><br><span class="line"></span><br><span class="line">                                    <span class="comment">#cv2.waitKey(0)</span></span><br><span class="line">                                    <span class="comment">#cv2.destroyAllWindows()</span></span><br><span class="line">                                <span class="comment">#except:</span></span><br><span class="line">                                    </span><br><span class="line">                                <span class="comment">#   print(&quot;next!&quot;)</span></span><br><span class="line">                                    t4 = time_synchronized()</span><br><span class="line">                                    <span class="built_in">print</span>(<span class="string">f&#x27;Done. (<span class="subst">&#123;t4 - t3:<span class="number">.3</span>f&#125;</span>s)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码就会计算出双目测距的距离。注意该段代码需要导入matlab标定的相关参数。以及根据相关参数对图像进行修正的函数</p><p>这里给出整体代码的百度云链接。</p><p>链接：<a href="https://pan.baidu.com/s/1FUHlaKRHsZCxj6lS8il3Jw">https://pan.baidu.com/s/1FUHlaKRHsZCxj6lS8il3Jw</a><br>提取码：i2q5 </p><p>最后便可得出测试效果，如下图。</p><p><img src="/articleImg/18_article/distance.png" alt="distance"></p><h2 id="测试总结"><a href="#测试总结" class="headerlink" title="测试总结"></a>测试总结</h2><ul><li>单独在Jetson Nano上运行yolov5进行实时的目标检测还是挺快的</li><li>进行实时检测时需要指定摄像头数据 –source 0</li><li>在程序中可以设置摄像头的相关数据（双目摄像头需要设置分辨率，不设置的话只会有一个摄像头工作）</li><li>进行视频离线处理视频测距 OK</li><li>进行实时双目测距过程时，由于YOLOV5网络在处理实时数据，会resize图像，导致图像大小发生变化，因此经常会发生数组越界问题</li><li>总体来说，个人觉得测距精度不是很高，后续在进行相关的优化吧~</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nano车载平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双目测距 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个对象引用</title>
      <link href="/2021/09/26/%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/"/>
      <url>/2021/09/26/%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="java中多个对象引用"><a href="#java中多个对象引用" class="headerlink" title="java中多个对象引用"></a>java中多个对象引用</h1><p>在堆中new出一个对象之后，对应栈中可以有多个地址指向该对象，也就是多个对象引用。</p><p>这些对象引用在调用对象方法时，实际上始终都是在调用堆中那个对象的方法。</p><p><strong>换个简单点的说法也就是，你这个对象可以有很多名字，但是最终不管通过哪一个名字来操作，影响的始终都是那一个对象！</strong></p><p>插个图吧：</p><p> <img src="/articleImg/16_article/object_reference.png" alt="object_reference"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多个对象引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列</title>
      <link href="/2021/09/25/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
      <url>/2021/09/25/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p>由于循环队列是普通队列的升级版本，使用效率更高，如果可以实现循环队列的话，那你实现普通队列应该也就没什么问题。</p><p>本次实现是用数组模拟队列，当然使用链队也是可以的。</p><p>下面简单的对循环队列做出简要说明，以备后期复习使用：</p><ul><li>因为队列的输出、 输入是分别从前后端来处理， 因此需要两个变量 front 及 rear 分别记录队列前后端的下标，front 会随着数据输出而改变， 而 rear 则是随着数据输入而改变， 如图所示  </li></ul><p> <img src="/articleImg/15_article/queue.png" alt="queue"></p><ul><li>循环队列中的元素个数，可以直接公式给出，当然 可以通过头尾节点的位置，通过遍历整个队列，也可得到队列中元素的个数。下面给出推导过程</li></ul><p><img src="/articleImg/15_article/count_num.png" alt="count_num"></p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p> <img src="/articleImg/15_article/process.png" alt="process"></p><h2 id="附上本次java代码"><a href="#附上本次java代码" class="headerlink" title="附上本次java代码"></a>附上本次java代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhanglei;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularArrayQueue</span></span>&#123;  <span class="comment">//这里实现循环队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">// 表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front; <span class="comment">// 队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear; <span class="comment">// 队列尾(********切记*************该循环队列中rear指示的是队列尾部的&quot;下一个空位置&quot;)</span></span><br><span class="line">    <span class="comment">//(也就是说rear对应的位置上没有元素的储存)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">// 该数据用于存放数据, 模拟队列</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircularArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 队列头</span></span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 队列尾</span></span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 该数据用于存放数据, 模拟队列</span></span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isfull</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = (rear+maxSize-front)%maxSize; <span class="comment">//在数组中队列中的元素可以通过该公式直接算出</span></span><br><span class="line">        <span class="comment">//博客中会解释该公式的由来</span></span><br><span class="line">        <span class="comment">//当然 可以通过头尾节点的位置，通过遍历整个队列，也可得到队列中元素的个数</span></span><br><span class="line">        <span class="keyword">return</span> num == maxSize-<span class="number">1</span>;  <span class="comment">//切记这里返回的是maxSize-1，因为rear位置上并没有储存数据</span></span><br><span class="line">        <span class="comment">//所以该队列的使用率为 maxSize-1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isempty</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rear==front; <span class="comment">//当头尾标号相等时，队列为空，返回真</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isfull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该队列元素已满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[rear] = value;</span><br><span class="line">        rear = (rear+<span class="number">1</span>)%maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123; <span class="comment">//获取队头元素，队列是属于先进先出，取队头</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isempty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该队列已空，无法取出数据&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[front];</span><br><span class="line">        front = (front+<span class="number">1</span>)%maxSize;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span> </span>&#123; <span class="comment">//查看队头元素，不用出队</span></span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> copy_front = front;  <span class="comment">//这里不可以直接使用front，否则毁坏队列</span></span><br><span class="line">        <span class="keyword">if</span>(isempty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列中无元素&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;开始打印该队列：队头-&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(copy_front != rear) &#123;</span><br><span class="line">            System.out.print(arr[copy_front]);</span><br><span class="line">            System.out.print(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            copy_front = (copy_front+<span class="number">1</span>)%maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;队尾&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用链队在思想上也是一样的，继续加油~</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 循环队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏矩阵</title>
      <link href="/2021/09/24/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
      <url>/2021/09/24/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h1><p>从今天开始简单记录一下自己用java写一些数据结构的过程吧，之前用C语言学习数据结构的时候，没有用心去记录，导致自己遗忘的很快，很是后悔。这次好好学，好好记~</p><p>由于稀疏矩阵较为简单，这里插入算法流图，并附上代码，以备后期复习用。</p><p> <img src="/articleImg/14_article/img1.png" alt="img1"></p><p>代码如下，代码中也有相关的注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhanglei;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.api.scripting.ScriptObjectMirror;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩后的矩阵第一行三个数的含义分别是  ： 原始数组的长度、原始数组的宽度、原始数组中非零数字的个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseMatrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] chessarray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SparseMatrix sparseMatrix = <span class="keyword">new</span> SparseMatrix();</span><br><span class="line">        <span class="keyword">int</span>[][] compression = sparseMatrix.Compression();</span><br><span class="line">        sparseMatrix.recover();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] Compression()&#123;  <span class="comment">//压缩矩阵</span></span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//记录有多少非0值</span></span><br><span class="line">        <span class="keyword">int</span> row_length=<span class="number">0</span>;<span class="comment">//chessarray长度</span></span><br><span class="line">        <span class="keyword">int</span> column_width=<span class="number">0</span>;<span class="comment">//chessarray宽度</span></span><br><span class="line">        <span class="comment">//初始化随便赋值几个非零值</span></span><br><span class="line">        chessarray[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessarray[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//打印该原始矩阵</span></span><br><span class="line">        System.out.println(<span class="string">&quot;原矩阵打印&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] rows : chessarray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> temp : rows) &#123;</span><br><span class="line">                <span class="keyword">if</span>(rows==chessarray[<span class="number">0</span>])</span><br><span class="line">                    row_length++;</span><br><span class="line">                <span class="keyword">if</span>(temp!=<span class="number">0</span>)</span><br><span class="line">                    count++;</span><br><span class="line">                System.out.print(temp+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            column_width++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(row_length);</span></span><br><span class="line">        <span class="comment">//System.out.println(column_width);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始进行压缩矩阵的数据存储  （稀疏矩阵的核心就在这里吧）</span></span><br><span class="line">        <span class="keyword">int</span> [][]Compression_matrix = <span class="keyword">new</span> <span class="keyword">int</span>[count+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        Compression_matrix[<span class="number">0</span>][<span class="number">0</span>] = row_length;</span><br><span class="line">        Compression_matrix[<span class="number">0</span>][<span class="number">1</span>] = column_width;</span><br><span class="line">        Compression_matrix[<span class="number">0</span>][<span class="number">2</span>] = count;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(chessarray[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    Compression_matrix[index][<span class="number">0</span>] = i;</span><br><span class="line">                    Compression_matrix[index][<span class="number">1</span>] = j;</span><br><span class="line">                    Compression_matrix[index][<span class="number">2</span>] = chessarray[i][j];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;压缩矩阵打印&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] compression_matrix : Compression_matrix) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> compressionMatrix : compression_matrix) &#123;</span><br><span class="line">                System.out.print(compressionMatrix+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将压缩后的矩阵存储到data文件中</span></span><br><span class="line">        BufferedWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\Algorithm\\java\\稀疏矩阵\\matrix.data&quot;</span>));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : Compression_matrix) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                    out.write(anInt+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                out.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Compression_matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  <span class="comment">//还原矩阵</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从data文件中取出相关数据</span></span><br><span class="line">        BufferedReader in;</span><br><span class="line">        in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\Algorithm\\java\\稀疏矩阵\\matrix.data&quot;</span>));</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cols = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//读取第一行的值,获得原始数组几行几列，几个有效值</span></span><br><span class="line">        line = in.readLine();</span><br><span class="line">        String[] strings = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        rows = Integer.parseInt(strings[<span class="number">0</span>]);</span><br><span class="line">        cols = Integer.parseInt(strings[<span class="number">1</span>]);</span><br><span class="line">        sum = Integer.parseInt(strings[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//初始化原始数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] ori = <span class="keyword">new</span> <span class="keyword">int</span>[rows][cols];</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((line = in.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            start++;</span><br><span class="line">            <span class="keyword">if</span>(start&lt;=sum)&#123; <span class="comment">//判断非零数字是否读取完毕</span></span><br><span class="line">                String[] split = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                ori[Integer.parseInt(split[<span class="number">0</span>])][Integer.parseInt(split[<span class="number">1</span>])] = Integer.parseInt(split[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印还原后的矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : ori) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后续加油！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 稀疏矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器中的三个域对象</title>
      <link href="/2021/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E5%9F%9F%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/09/23/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E5%9F%9F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat中的三个域对象"><a href="#tomcat中的三个域对象" class="headerlink" title="tomcat中的三个域对象"></a>tomcat中的三个域对象</h1><table><thead><tr><th>域对象</th><th align="left">创建</th><th>销毁</th><th>作用范围</th><th>应用场景</th></tr></thead><tbody><tr><td>ServletContext</td><td align="left">服务器启动（每个服务器只有一个）</td><td>服务器正常关闭/项目从服务器移除</td><td>整个项目</td><td>记录网站访问次数,聊天室</td></tr><tr><td>HttpSession</td><td align="left">没有JSESSIONID这个cookie的时候，调 用request.getSession()方法（每个浏览器一个）</td><td>session过期（默认闲置30分钟），或者调用session对象的invalidate(）方法，或者服务器<strong>异常</strong>关闭</td><td>会话(多次请求)</td><td>验证码校验, <strong>保存用户登录状态</strong>等</td></tr><tr><td>HttpServletRequest</td><td align="left">来了请求（每次请求一个）</td><td>响应这个请求(或者请求已经接收了)</td><td>一次请求</td><td>servletA和jsp（servletB）之间数据传递(转发的时候存数据)</td></tr></tbody></table><h2 id="三个域对象如何选择"><a href="#三个域对象如何选择" class="headerlink" title="三个域对象如何选择"></a>三个域对象如何选择</h2><p>​    一般情况下, 最小的可以解决就用最小的.</p><p>​    但是需要根据情况(eg: 重定向, 多次请求, 会话范围, 用session;  如果是转发,一般选择request)</p><h2 id="ServletContext相关API"><a href="#ServletContext相关API" class="headerlink" title="ServletContext相关API"></a>ServletContext相关API</h2><ul><li>获取ServletContext对象                              ServletContext servletContext = getServletContext();</li><li>往容器ServletContext中存值                      servletContext.setAttribute(“name”,name);</li><li>从容器ServletContext中获取数据               String name = (String) servletContext.getAttribute(“name”);</li><li>获得文件mime-type                                     String mimeType01 = getServletContext().getMimeType(file01);</li><li>获得全局初始化参数                                     String getInitParameter(String name) ; //根据配置文件中的key得到value; </li><li>获取Web资源路径                                        String  getRealPath(String path);根据资源名称得到资源的绝对路径.</li><li>获取Web资源路径                                        getResourceAsStream(String path) ;返回制定路径文件的流</li></ul><h2 id="HttpSession相关API"><a href="#HttpSession相关API" class="headerlink" title="HttpSession相关API"></a>HttpSession相关API</h2><p>session是服务器端的技术, 数据保存在服务器端的</p><ul><li>获取session      requet.getSession()  只有在服务器端调用了该API，才有session产生</li><li>session基于cookie的<ul><li>创建session的同时 生成sessionId, 服务器自动通过Cookie的方式写给浏览器, 浏览器自己保存</li><li>下次的话 浏览器携带cookie(SessionId)找到对应的session使用了</li></ul></li><li>Object getAttribute(String name) ;获取值</li><li>void setAttribute(String name, Object value) ;存储值</li><li>void removeAttribute(String name)  ;移除</li></ul><h2 id="HttpServletRequest-相关知识"><a href="#HttpServletRequest-相关知识" class="headerlink" title="HttpServletRequest 相关知识"></a>HttpServletRequest 相关知识</h2><h3 id="request作用"><a href="#request作用" class="headerlink" title="request作用"></a>request作用</h3><ul><li><strong>操作请求三部分(行,头,体)</strong><ul><li>获取请求行的信息<ul><li>获取请求方式:getMethod() </li><li>获取请求的客户端的ip地址:getRemoteAddr()</li><li>获取项目部署的路径:getContextPath() </li><li>获取uri:统一资源标识符</li></ul></li><li>获取请求头的信息:getHeader(name)</li><li>获取请求参数（全部要掌握，最重要）<ul><li>getParameter(name)</li><li>getParameterValues(name)</li><li>getParameterMap()</li></ul></li><li>使用BeanUtils将map中的数据存储到JavaBean对象中（需要引入相关jar包）<ul><li>map的key要和JavaBean的属性名保持一致，如果不一致那么该字段的值就无法存储</li><li>BeanUtils中默认内置一些基本类型的转换器（如果map中的数据是string类型，JavaBean的属性还是int类型那么会自动转换）</li></ul></li></ul></li></ul><ul><li><strong>请求转发</strong>：request.getRequestDispatcher(“转发的路径”).forward(request,response); <ul><li>跳转操作是由服务器执行的，所以客户端地址栏不会发生变化</li><li>跳转操作不会发起新的请求</li><li>可以跳转到WEB-INF中的资源，但是不能跳转到其它项目的资源</li></ul></li></ul><ul><li><strong>作为”域对象“存数据</strong>  （一般会与请求转发一起使用）<ul><li>Object getAttribute(String name) ;  取</li><li>void setAttribute(String name,Object object)  ; 存</li><li>void removeAttribute(String name)  ; 移除</li></ul></li></ul><h3 id="response相关作用"><a href="#response相关作用" class="headerlink" title="response相关作用"></a>response相关作用</h3><ul><li>设置响应状态码:setStatus()</li><li>设置响应头:setHeader(name,value)<ul><li>refresh响应头，用于隔几秒钟之后跳转到某个页面</li><li>location响应头，用于重定向到某个页面</li></ul></li><li><strong>重定向</strong>的写法: sendRedirect(地址)</li><li>设置响应体的内容<ul><li>使用字符输出流输出文本内容<ul><li>response.getWriter()获取字符输出流</li><li>writer.write()/print()输出字符串</li><li>解决响应数据的中文乱码:response.setContentType(“text/html;charset=UTF-8”)</li></ul></li><li>使用字节输出流输出文件<ul><li>response.getOutputStream()获取字节输出流</li></ul></li></ul></li><li>使用IO流的框架进行边读边写</li></ul><h3 id="request中的请求转发与response中的重定向的区别"><a href="#request中的请求转发与response中的重定向的区别" class="headerlink" title="request中的请求转发与response中的重定向的区别"></a>request中的请求转发与response中的重定向的区别</h3><ul><li><strong>重定向特点</strong><ol><li>重定向的跳转是由浏览器发起的，在这个过程中浏览器会发起两次请求</li><li>定向跳转可以跳转到任意服务</li><li>无法跳转到WEB-INF中的资源，浏览器访问不到的，重定向也访问不到</li><li>重定向跳转不能和request域对象一起使用</li><li>重定向跳转浏览器的地址栏中的地址会变成跳转到的路径</li></ol></li><li><strong>请求转发特点</strong><ol><li>请求转发的跳转是由服务器发起的，在这个过程中浏览器只会发起一次请求</li><li>请求转发只能跳转到本项目的资源，但是可以跳转到WEB-INF中的资源</li><li>请求转发可以和request域对象一起使用</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器域对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java栈、堆、方法区</title>
      <link href="/2021/09/17/java%E6%A0%88%E3%80%81%E5%A0%86%E3%80%81%E6%96%B9%E6%B3%95%E5%8C%BA/"/>
      <url>/2021/09/17/java%E6%A0%88%E3%80%81%E5%A0%86%E3%80%81%E6%96%B9%E6%B3%95%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="java-堆、栈、方法区"><a href="#java-堆、栈、方法区" class="headerlink" title="java 堆、栈、方法区"></a>java 堆、栈、方法区</h1><h2 id="三个区的不同之处"><a href="#三个区的不同之处" class="headerlink" title="三个区的不同之处"></a>三个区的不同之处</h2><ul><li><h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区:"></a>堆区:</h3><p>1.<strong>存储的全部是对象</strong>，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)<br>2.jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，<strong>只存放对象本身</strong> 。</p></li><li><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区:"></a>栈区:</h3><p>1.每个线程包含一个栈区，栈中只保存<strong>基础数据类型的值</strong>和<strong>对象引用以及基础数据的引用</strong><br>2.每个栈中的数据(基础数据类型和对象引用)都是私有的，其他栈不能访问。<br>3.栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。 </p></li><li><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区:"></a>方法区:</h3><p>1.又叫静态区，跟堆一样，被所有的线程共享。<strong>方法区包含所有的class和static变量</strong>。<br>2.方法区中<strong>包含的都是在整个程序中永远唯一的元素</strong>，如class，static变量。 </p></li></ul><p> <img src="/articleImg/11_article/img1.png" alt="img1"></p><h3 id="什么是栈区的对象引用"><a href="#什么是栈区的对象引用" class="headerlink" title="什么是栈区的对象引用"></a>什么是栈区的对象引用</h3><p><strong>对象</strong>，就是类的一个实例化，把一个抽象不好理解的类举出一个实体来，例如人类是一个类，会吃喝拉撒，实例化出一个小明这个具体的人。 对象引用，就是得给这个人取个名字来指代他，跟c++的指针一样，指向这个人，可以给他一个名字王小明，王小明就是<strong>对象引用</strong>。我们想到这个人的时候就会用王小明去代替他，例如 王小明今天吃了什么，王小明多高，多重，是这个人的属性，用编程语言就是 print（王小明.身高）<br>那么在内存上有什么区别呢，当我 用人这个类实例化出王小明时，电脑是这样识别的 （人 王小明），王小明=new 人（185，60），先给出一个对象引用，此时王小明这个代号可以指向任何人，你也可以叫王小明，他也可以，然后我实例化出一个人，我把王小明这个代号指向了这个人，这个人的内存是在堆内存里的，而王小明这个对象引用是在栈内存里的</p><p>说白了对象引用就是实例对象的名字！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆栈方法区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之对象之间的强制类型转换</title>
      <link href="/2021/09/17/java%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2021/09/17/java%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="java之对象之间的强制类型转换"><a href="#java之对象之间的强制类型转换" class="headerlink" title="java之对象之间的强制类型转换"></a>java之对象之间的强制类型转换</h1><p>先定义一个父类，一个子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;  <span class="comment">//父类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;   <span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>子类对象可以声明为父类类型，父类对象不可以声明为子类类型<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test a=<span class="keyword">new</span> TestExtend();   <span class="comment">//正确</span></span><br><span class="line">TestExtend b=<span class="keyword">new</span> Test();   <span class="comment">//错误</span></span><br></pre></td></tr></table></figure></li><li><p>在子类对象声明为父类类型后，可以通过强制转型，转型回来<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test a=<span class="keyword">new</span> TestExtend();</span><br><span class="line">TestExtend a=(TestExtend) b;         <span class="comment">//正确</span></span><br></pre></td></tr></table></figure></li><li><p>而父类对象声明为父类类型之后，并不能执行强制类型转化<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test a=<span class="keyword">new</span> Test();</span><br><span class="line">TestExtend a=(TestExtend) a;                  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure></li></ul><p>总结：因为在子类对象声明为父类类型后，其实对象的真实意义还是子类对象</p><p>转自 CSDN博主：LookUpMan</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强制类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中初始化块和静态初始化块的区别</title>
      <link href="/2021/09/15/Java%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97%E5%92%8C%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/09/15/Java%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97%E5%92%8C%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中初始化块和静态初始化块的区别"><a href="#Java中初始化块和静态初始化块的区别" class="headerlink" title="Java中初始化块和静态初始化块的区别"></a>Java中初始化块和静态初始化块的区别</h1><h2 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h2><p>在Java中,有两种初始化块:<strong>静态初始化块</strong>和<strong>非静态初始化块</strong>.</p><ul><li><p><strong>静态初始化块</strong>:使用static定义,当类装载到系统时执行一次.若在静态初始化块中想初始化变量,那仅能初始化类变量,即static修饰的数据成员.</p></li><li><p><strong>非静态初始化块</strong>:在每个对象生成时都会被执行一次,可以初始化类的实例变量.</p><p>非静态初始化块会在构造函数执行时,且在构造函数主体代码执行之前被运行.</p><p>括号里的是初始化块(非静态初始化块)，这里面的代码在创建java对象时执行，而且在构造器之前执行！</p><p>其实初始化块就是构造器的补充，<strong>初始化块是不能接收任何参数的</strong>，定义的一些<strong>所有对象共有的属性、方法等内容时就可以用初始化块了初始化</strong>！！</p></li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面给出卷一中的示例代码<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates object construction,</span></span><br><span class="line"><span class="comment"> * Aversion 1.01 2004-02-19</span></span><br><span class="line"><span class="comment"> * ©author Cay Horstmann</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="comment">// fill the staff array with three Employee objects</span></span><br><span class="line">        Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>]:</span><br><span class="line">        staff[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>, <span class="number">40000</span>);</span><br><span class="line">        staff[<span class="number">1</span>] = <span class="keyword">new</span> Employee(<span class="number">60000</span>);</span><br><span class="line">        staff[<span class="number">2</span>] = <span class="keyword">new</span> Employee();</span><br><span class="line">        <span class="comment">// print out information about all Employee objects</span></span><br><span class="line">        <span class="keyword">for</span> (Employee e : staff)</span><br><span class="line">        System,out.println(<span class="string">&quot;name=&quot;</span> + e.getNameO + <span class="string">&quot;,id=&quot;</span> + e.getldO + <span class="string">&quot;,salary:&quot;</span></span><br><span class="line">        + e.getSalary());</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextld;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">     <span class="keyword">private</span> String name = <span class="comment">// instance field initialization</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// static initialization block  </span></span><br><span class="line">     <span class="comment">//该类一被加载，就会执行该静态代码块，且只在加载类时执行一次</span></span><br><span class="line">      <span class="keyword">static</span></span><br><span class="line">      &#123;</span><br><span class="line">       Random generator = <span class="keyword">new</span> Random();</span><br><span class="line">       <span class="comment">// set nextld to a random number between 0 and 9999</span></span><br><span class="line">       nextld = generator.nextlnt(<span class="number">10000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// object initialization block</span></span><br><span class="line">    <span class="comment">//初始代码块，在每次创造对象时，就会优于构造函数一步，执行</span></span><br><span class="line">        &#123;</span><br><span class="line">        id = nextld;</span><br><span class="line">        nextld++;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">// three overloaded constructors</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n, <span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">     name = n;</span><br><span class="line">     salary = s;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// calls the Employee(String, double) constructor</span></span><br><span class="line">      ★★★  <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span> + nextld, s);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="comment">// name initialized to &quot;&quot; see above</span></span><br><span class="line">        <span class="comment">// salary not explicitly set initialized to 0</span></span><br><span class="line">        <span class="comment">// id initialized in initialization block    </span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getld</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对this顺便记录下"><a href="#对this顺便记录下" class="headerlink" title="对this顺便记录下"></a>对this顺便记录下</h2><p>在上述的代码中★★★处有个this，我对this的第二个功能理解的不太好，就是在构造函数中调用其他构造函数，这里简要也记录一下this<br/></p><ul><li><p>this作为隐式参数，也就是被构造的对象，我们以this.实例域的方式来访问实例域。<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.salary=salary;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>this的另一个作用是调用自己同一个类的其他构造器，形式为this(…)<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//调用Employee(String,double)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>(<span class="string">&quot;Employe#&quot;</span>+nextId,s);</span><br><span class="line"></span><br><span class="line">nextId++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当我们调用new Employee(6000）的时候，Employee（double）构造器将调用Employee(String,double)构造器。</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初始化块和静态初始化块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法参数:Java中如何交换两个对象</title>
      <link href="/2021/09/09/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/09/09/%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0-Java%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="方法参数：Java中如何交换两个对象"><a href="#方法参数：Java中如何交换两个对象" class="headerlink" title="方法参数：Java中如何交换两个对象"></a>方法参数：Java中如何交换两个对象</h1><h2 id="方法参数传递的几种形式"><a href="#方法参数传递的几种形式" class="headerlink" title="方法参数传递的几种形式"></a>方法参数传递的几种形式</h2><p>java中只有值传递，基本类型传递的是值的副本，引用类型传递的是引用的副本。</p><p>在核心卷一中一共有三种情况，</p><ol><li><p>基本数据类型作为方法参数<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripieValue</span><span class="params">(<span class="keyword">double</span> x)</span> <span class="comment">// doesn&#x27;t work</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="number">3</span> * x;</span><br><span class="line">&#125;</span><br><span class="line">然后调用这个方法：</span><br><span class="line"><span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">tripieValue(percent);</span><br><span class="line"></span><br><span class="line">在方法调用之后， percent 的值还是 <span class="number">10</span>。</span><br></pre></td></tr></table></figure><p>对于基本数据类型总结来说就是：一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）  </p></li><li><p>对象作为方法参数<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> tri pi eSal <span class="title">ary</span><span class="params">(Employee x)</span> <span class="comment">// works</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x.raiseSa1ary(<span class="number">200</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">当调用</span><br><span class="line">harry = <span class="keyword">new</span> Employee(. . .) ;</span><br><span class="line">tripieValue(harry) ; <span class="comment">// 注意这里是传入的对象，对该对象进行了浅拷贝</span></span><br><span class="line"><span class="comment">// 最后 方法结束后，参数变量 x 不再使用。当然，对象变量 harry 继续引用那个薪金增至3倍的雇员对象</span></span><br></pre></td></tr></table></figure><p>对于这一点也就是说：一个方法可以改变一个对象参数的状态  </p></li><li><p>如果要交换两个对象，在Java方法中是行不通的，虽然做了浅拷贝，但改变副本的地址，对原本的实参没有影响。<br/>若想解决该问题，达到对象互换的效果，就应该借助第2点的思想“一个方法可以改变一个对象参数的状态”<br/>利用封装类的思想，把对象当作另一个类的成员变量。<br/></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Java program to demonstrate that we can use wrapper</span></span><br><span class="line"><span class="comment">// classes to swap to objects</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A car with model and no.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> model, no;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    Car(<span class="keyword">int</span> model, <span class="keyword">int</span> no)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Utility method to print object details</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;no = &quot;</span> + no + </span><br><span class="line">                           <span class="string">&quot;, model = &quot;</span> + model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A Wrapper over class that is used for swapping</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarWrapper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   Car c;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Constructor</span></span><br><span class="line">   CarWrapper(Car c)   &#123;<span class="keyword">this</span>.c = c;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A Class that use Car and swaps objects of Car</span></span><br><span class="line"><span class="comment">// using CarWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// This method swaps car objects in wrappers</span></span><br><span class="line">    <span class="comment">// cw1 and cw2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(CarWrapper cw1, </span></span></span><br><span class="line"><span class="params"><span class="function">                            CarWrapper cw2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Car temp = cw1.c;</span><br><span class="line">        cw1.c = cw2.c;</span><br><span class="line">        cw2.c = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Driver method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Car c1 = <span class="keyword">new</span> Car(<span class="number">101</span>, <span class="number">1</span>);</span><br><span class="line">        Car c2 = <span class="keyword">new</span> Car(<span class="number">202</span>, <span class="number">2</span>);</span><br><span class="line">        CarWrapper cw1 = <span class="keyword">new</span> CarWrapper(c1);</span><br><span class="line">        CarWrapper cw2 = <span class="keyword">new</span> CarWrapper(c2);</span><br><span class="line">        swap(cw1, cw2);</span><br><span class="line">        cw1.c.print();</span><br><span class="line">        cw2.c.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">no = <span class="number">2</span>, model = <span class="number">202</span></span><br><span class="line">no = <span class="number">1</span>, model = <span class="number">101</span></span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>Java中只有值传递，基本类型传递的是值的副本，引用类型传递的是引用的副本。</p><p>所以如果用户类不能访问到被交换的类的成员的时候，封装类可以解决这个问题。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方法参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通配符和正则表达式</title>
      <link href="/2021/09/09/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/09/09/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="通配符和正则表达式"><a href="#通配符和正则表达式" class="headerlink" title="通配符和正则表达式"></a>通配符和正则表达式</h1><p>今晚学了一会linux，记录一下吧，我觉得这个知识点是不是的就会出现，比如爬虫解析网页时也会需要到~</p><h2 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h2><ol><li>通配符代表的是bash的一个功能。一般只用于文件名匹配，它是由shell解析的，比如find，ls，cp，mv等。</li><li>正则表达式是一种字符串处理的方式。针对文件内容的文本过滤工具里，大都用到正则表达式，如vi，grep，awk，sed等</li><li>可以简单的理解为通配符只有*,?,[],{}这4种，而正则表达式复杂多了</li><li>在通配符中*可以匹配任意的0个或多个字符，而在正则表达式中他是重复之前的一个或者多个字符，不能独立使用的</li></ol><p>下面对这两个东西进行简要的记录。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="常用标识"><a href="#常用标识" class="headerlink" title="常用标识"></a>常用标识</h3><table><thead><tr><th>符号”.”</th><th>符号”*”</th><th>符号”[]”，总之就是取其中的一个</th></tr></thead><tbody><tr><td>匹配任意一个字符，除了换行符。类似shell通配符中的”?”，匹配一个任意字符。</td><td>“ * “表示前边字符有0个或多个。”.*”表示任意一个字符有0个或多个，也就是能匹配任意的字符。类似shell通配符中的”  * “，可以匹配任意字符。</td><td>“[ ]”中括号中可以包含表示字符集的表达式。使用方法大概有如下几种。<br/>[a-z]：表示a-z字符中的一个，也就是小写字母。<br/>[0-9]：表示0-9字符中的一个，也就是表示数字。<br/>[A-Z]：表示大写字母。<br/>[a-zA-Z]：表示字符集为小写字母或者大写字母。<br/>[a-zA-Z0-9]：表示普通字符，包括大小写字母和数字。<br/>[abc]：表示字符a或者字符b或者字符c。<br/>[ ^ 0-9 ]：表示非数字类型的字符，^表示取反意思，只能放在中括号的开始处才有意义。</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th>字符</th><th align="center">含义</th></tr></thead><tbody><tr><td>^</td><td align="center">指向一行的开头<br/>这里要注意^符号需要放到 ^[]外面，才会代表行首的意思，否者放在里面，就表示取反了</td></tr><tr><td>$</td><td align="center">指向一行的结尾</td></tr><tr><td>.</td><td align="center">任意单个字符</td></tr><tr><td>\</td><td align="center">表示是转义字符</td></tr><tr><td>{}</td><td align="center">表示前边字符的数量范围，但是必须注意要加上转义字符” \ “<br/>eg:{2,9}：表示前边字符的重复次数大于2但小于9</td></tr></tbody></table><h3 id="拓展正则表达式"><a href="#拓展正则表达式" class="headerlink" title="拓展正则表达式"></a>拓展正则表达式</h3><p>扩展正则表达式是在基本正则表达式中扩展出来的，频率上可能没有基本正则表达式那么高</p><table><thead><tr><th>字符</th><th align="center">含义</th></tr></thead><tbody><tr><td>？</td><td align="center">表示前置字符有0个或1个</td></tr><tr><td>+</td><td align="center">表示前置字符有1个或多个</td></tr><tr><td>|</td><td align="center">表示指明两项之间的一个选择。<br/>abc|ABC：表示可以匹配abc或者ABC<br/>（需要注意在bash中他还表示管道，即上一条命令的输出作为下一条命令的参数）</td></tr><tr><td>()</td><td align="center">表示分组<br/> (a|b)b：表示可以匹配ab或者bb字串<br/>([0-9]) | ( [ 0 ] [0 - 9]):表示匹配0-9或者00-09</td></tr></tbody></table><p>特殊匹配模式</p><table><thead><tr><th>匹配模式</th><th>含义</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>字母与数字字符,如grep[[:alnum:]] words.txt</td></tr><tr><td>[:alpha:]</td><td>字母</td></tr><tr><td>[:ascii:]</td><td>ASCII字符</td></tr><tr><td>[:blank:]</td><td>空格或制表符</td></tr><tr><td>[:cntrl:]</td><td>ASCII控制字符</td></tr><tr><td>[:digit:]</td><td>数字</td></tr><tr><td>[:graph:]</td><td>非控制、非空格字符</td></tr><tr><td>[:lower:]</td><td>小写字母</td></tr><tr><td>[:print:]</td><td>可打印字符</td></tr><tr><td>[:punct:]</td><td>标点符号字符</td></tr><tr><td>[:space:]</td><td>空白字符，包括垂直制表符</td></tr><tr><td>[:upper:]</td><td>大写字母</td></tr><tr><td>[:xdigit:]</td><td>十六进制数字</td></tr></tbody></table><p>下面简单记录以下通配符</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><h3 id="常见通配符"><a href="#常见通配符" class="headerlink" title="常见通配符"></a>常见通配符</h3><table><thead><tr><th><strong>通配符</strong></th><th><strong>含义</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>*</td><td>匹配 0 或多个字符</td><td>a*b a与b之间可以有任意长度的任意字符, 也可以一个也没有, 如aabcb, axyzb, a012b, ab。</td></tr><tr><td>?</td><td>匹配任意一个字符</td><td>a?b a与b之间必须也只能有一个字符, 可以是任意字符, 如aab, abb, acb, a0b。</td></tr><tr><td>[list]</td><td>匹配 list 中的任意单一字符</td><td>a[xyz]b  a与b之间必须也只能有一个字符, 但只能是 x 或 y 或 z, 如: axb, ayb, azb。</td></tr><tr><td>[!list]或[ ^ list]</td><td>匹配 除list 中的任意单一字符</td><td>a[!0-9]b a与b之间必须也只能有一个字符, 但不能是阿拉伯数字, 如axb, aab, a-b。</td></tr><tr><td>[c1-c2]</td><td>匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]</td><td>a[0-9]b 0与9之间必须也只能有一个字符 如a0b, a1b… a9b。</td></tr><tr><td>[!c1-c2]或[ ^ c1-c2]</td><td>匹配不在c1-c2的任意字符</td><td>a[!0-9]b 如acb adb</td></tr><tr><td>{string1,string2,…}</td><td>匹配 sring1 或 string2 (或更多)其一字符串</td><td>a{abc,xyz,123}b 列出aabcb,axyzb,a123b</td></tr></tbody></table><h3 id="shell-元字符"><a href="#shell-元字符" class="headerlink" title="shell 元字符"></a>shell 元字符</h3><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>IFS</td><td>由 <space> 或 <tab> 或 <enter> 三者之一组成(我们常用 space )</td></tr><tr><td>CR</td><td>由 <enter> 产生</td></tr><tr><td>=</td><td>设定变量</td></tr><tr><td>$</td><td>取变量值或取运算值</td></tr><tr><td>&gt;</td><td>重定向 stdout</td></tr><tr><td>&lt;</td><td>重定向 stdin</td></tr><tr><td>|</td><td>管道符号                 《注意这里与正则表达式的区别》</td></tr><tr><td>&amp;</td><td>重导向 file descriptor ，或将命令置于背景执行</td></tr><tr><td>( )</td><td>将其内的命令置于 nested subshell 执行，或用于运算或命令替换</td></tr><tr><td>{ }</td><td>将其内的命令置于 non-named function 中执行，或用在变量替换的界定范围</td></tr><tr><td>;</td><td>在前一个命令结束时，而忽略其返回值，继续执行下一个命令</td></tr><tr><td>&amp;&amp;</td><td>在前一个命令结束时，若返回值为 true，继续执行下一个命令</td></tr><tr><td>||</td><td>在前一个命令结束时，若返回值为 false，继续执行下一个命令</td></tr><tr><td>!</td><td>运算意义上的非（not）的意思</td></tr><tr><td>#</td><td>注释，常用在脚本中</td></tr><tr><td>\</td><td>转移字符，去除其后紧跟的元字符或通配符的特殊意义</td></tr></tbody></table><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>这里注意shell中单引号与双引号转义时的区别</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>‘’(单引号)</td><td>硬转义，其内部所有的shell 元字符、通配符都会被关掉。</td></tr><tr><td>“”(双引号)</td><td>软转义，其内部只允许出现特定的shell 元字符：$用于参数替换 `(反单引号，esc键下面)用于命令替换</td></tr><tr><td>(反斜杠)</td><td>又叫转义，去除其后紧跟的元字符或通配符的特殊意义</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就这样吧，先总结到这里，后续如果有什么需要补充的地方，再来修改吧~  该进行其他知识的学习了~</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通配符和正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在JestonNano上跑yoloV5</title>
      <link href="/2021/09/06/%E5%9C%A8JestonNano%E4%B8%8A%E8%B7%91yoloV5/"/>
      <url>/2021/09/06/%E5%9C%A8JestonNano%E4%B8%8A%E8%B7%91yoloV5/</url>
      
        <content type="html"><![CDATA[<h1 id="在Jeston-Nano上跑yoloV5"><a href="#在Jeston-Nano上跑yoloV5" class="headerlink" title="在Jeston Nano上跑yoloV5"></a>在Jeston Nano上跑yoloV5</h1><p>网上有很多教程都是讲如何在原生NANO上yoloV5，自己手上的Nano小车装有ros操作系统，我想把yolov5跑在ros中，这样就可以订阅摄像头话题了。</p><p>下面记录这两天解决这个问题的过程吧。</p><h2 id="CUDA确认"><a href="#CUDA确认" class="headerlink" title="CUDA确认"></a>CUDA确认</h2><p>jetson-nano的系统镜像中已经自带了cuda、cudnn、TensorRT等组件</p><ul><li><p>检查CUDA 开始时输入如下的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V  </span><br></pre></td></tr></table></figure></li><li><p>若没有发现cuda， 需要进行如下的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit  ~/.bashrc</span><br><span class="line"></span><br><span class="line"># 在这个配置文件的最后写入如下的内容。</span><br><span class="line">export CUDA_HOME=/usr/local/cuda-10.2</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH</span><br><span class="line">export PATH=/usr/local/cuda-10.2/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>再次验证 nvcc -V  成功</p></li></ul><h2 id="Archiconda-构建python环境"><a href="#Archiconda-构建python环境" class="headerlink" title="Archiconda 构建python环境"></a>Archiconda 构建python环境</h2><p>首先Nano上安装Archiconda，注意这里不是Anaconda，Nano的cpu架构和window的不一样，属于aarch64的架构，所以在构建各个环境的时候需要格外注意这一点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">附上安装包 ：  https://github.com/Archiconda/build-tools/releases</span><br></pre></td></tr></table></figure><p>下载之后就和普通的anaconda一模一样。直接执行安装，会装一个基本的环境。但真正用的时候还是会conda create -n py36 python=3.6 这样创建环境，然后source activate py36 激活并使用。</p><p>安装完conda，可以用conda -V查看是否安装成功，若没成功，可自行百度各种答案。</p><p>下面进行介绍搭建环境顺序步骤</p><ul><li><p>创建python3.6 ，这里切记后续安装的环境都在这里env里进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py36 python=3.6</span><br></pre></td></tr></table></figure></li><li><p>安装torch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 去英伟达官网下载相应的安装包（匹配jetson-nano）</span><br><span class="line"># 这里附上链接地址</span><br><span class="line">https://forums.developer.nvidia.com/t/pytorch-for-jetson-version-1-9-0-now-available/72048</span><br><span class="line"></span><br><span class="line"># 下载后，通过FileZilla传送到Nano中，安装命令如下</span><br><span class="line">pip install torch-1.6.0-cp36-cp36m-linux_aarch64.whl -i http://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure></li><li><p>安装torchvision</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 不得不说这个玩意卡了我大半天，不然这个工作早就完成了~ 在英伟达官网上找不到与torch1.6匹配的torchvision0.7.0</span><br><span class="line"># 如果换用其它版本的torchvision，就会报以下错误</span><br><span class="line">RuntimeError: No such operator torchvision::nms </span><br><span class="line"></span><br><span class="line">#于是在网上科普答案，最终得解</span><br><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev</span><br><span class="line">git clone --branch v0.7.0 https://gitee.com/zero-one-game/vision torchvision   </span><br><span class="line"># 鉴于国内网络环境，博主提供gitee码云加速下载，直接使用github会因出现网络问题而无法进行</span><br><span class="line">#这行命令是将源代码下载到了用户目录下的torchvision，如果torchvision已经存在，需要删除，如果提示permission denied</span><br><span class="line">#命令行使用sudo su 进入管理员模式，  执行 rm -r torchvision ,或者也可以自行查找更安全的删除方法</span><br><span class="line"></span><br><span class="line">cd torchvision   </span><br><span class="line"></span><br><span class="line">#进入用户目录下的torchvision，执行源代码编译工作，需要一定的时间，大概十多分钟</span><br><span class="line">sudo python3 setup.py install</span><br><span class="line"></span><br><span class="line">cd ../  # attempting to load torchvision from build dir will result in import error</span><br><span class="line">pip3 install &#x27;pillow&lt;7&#x27; # always needed for Python 2.7, not needed torchvision v0.5.0+ with Python 3.6</span><br><span class="line"></span><br><span class="line">-- 这里摘自CSDN博主「零壹博弈」</span><br></pre></td></tr></table></figure></li></ul><p>到这里yoloV5所需要的运行环境就算是做好了</p><h2 id="拉取yoloV5-ROS代码"><a href="#拉取yoloV5-ROS代码" class="headerlink" title="拉取yoloV5 ROS代码"></a>拉取yoloV5 ROS代码</h2><p>拉取地址如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/qianmin/yolov5_ROS</span><br></pre></td></tr></table></figure><p>在运行之前，需要做以下的工作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1:复制这个包(ros_yolo)到你的catkin_ws/src  </span><br><span class="line">2: catkin_make  </span><br><span class="line">3：在final_yolo.py中，你需要改变image_topic到你自己的相机输入主题  </span><br></pre></td></tr></table></figure><p>之后就可以开心的运行yoloV5啦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1:roscore2:roslaunch robot_vision robot_camera.launch   # 在移动机器人端使用启动摄像头3:conda activate py36                               #进入相应python环境4:rosrun ros_yolo final_yolo.py             # 起飞~</span><br></pre></td></tr></table></figure><h2 id="运行结果示意图"><a href="#运行结果示意图" class="headerlink" title="运行结果示意图"></a>运行结果示意图</h2><p>摄像头运行</p><p><img src="/articleImg/6_article/image1.png">  </p><p>采集并识别处理后的结果</p><p><img src="/articleImg/6_article/image2.png"> </p><h2 id="未完成任务"><a href="#未完成任务" class="headerlink" title="未完成任务"></a>未完成任务</h2><p>1：感觉FPS还是有点低，虽然已经用了nano的自带gpu，我看网上有的说TensorRT还可以加速，后续可以再看一下。</p><p>2：之后打算问一下老师需不需要做一个自己的数据集，去训练参数并识别。</p><p>3：开始理解雷达成像算法</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装相关工具包时极慢</title>
      <link href="/2021/09/06/python%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E5%8C%85%E6%97%B6%E6%9E%81%E6%85%A2/"/>
      <url>/2021/09/06/python%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E5%8C%85%E6%97%B6%E6%9E%81%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="python安装相关工具包时极慢"><a href="#python安装相关工具包时极慢" class="headerlink" title="python安装相关工具包时极慢"></a>python安装相关工具包时极慢</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None))</span><br></pre></td></tr></table></figure><p>当出现这个警告时代表着你安装时使用的源不太行，我当时的电脑已经配置了清华源（修改配置文件可自行百度），在已经配置清华源的情况下，我的下载还是感觉有点慢，感觉耽误很多时间啊，有没有！</p><p>解决方案也很简单，重新指定下载源。如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名  -i http://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure><p>如果出现报错，在后面再加上信任后缀</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--trusted-host pypi.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure><p>这里也一并附上国内其他的下载源（u1s1我感觉中科大的最好用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">阿里云 http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">豆瓣(douban) http://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line">清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由于开代理导致python环境搭建失败</title>
      <link href="/2021/09/04/%E7%94%B1%E4%BA%8E%E5%BC%80%E4%BB%A3%E7%90%86%E5%AF%BC%E8%87%B4python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%A4%B1%E8%B4%A5/"/>
      <url>/2021/09/04/%E7%94%B1%E4%BA%8E%E5%BC%80%E4%BB%A3%E7%90%86%E5%AF%BC%E8%87%B4python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="由于开代理导致python环境搭建失败"><a href="#由于开代理导致python环境搭建失败" class="headerlink" title="由于开代理导致python环境搭建失败"></a>由于开代理导致python环境搭建失败</h1><p>以前用ssr翻墙也没遇到这种情况，现在改用clash（价格便宜10块钱80g）翻墙之后，在搭建环境的时候遇到以下两种情况。</p><ol><li><p>安装或运行时时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;check_hostname requires server_hostname&quot;</span>)</span><br><span class="line">ValueError: check_hostname requires server_hostname</span><br></pre></td></tr></table></figure></li><li><p>安装包时报以下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collecting package metadata (current_repodata.json): failed</span><br><span class="line"></span><br><span class="line">An unexpected error has occurred. Conda has prepared the above report.</span><br><span class="line"></span><br><span class="line">If submitted, this report will be used by core maintainers to improve</span><br><span class="line">future releases of conda.</span><br><span class="line">Would you like conda to send this report to the core maintainers?</span><br></pre></td></tr></table></figure></li></ol><p>遇到这样的情况，一般是由两种原因造成，并附上解决方案</p><ul><li><p>每次使用 pip install 命令下载插件的时候，下载的都是最新的版本，导致版本较高，可通过一下方式降级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 插件名称  -i http://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure></li><li><p>极可能是开了代理，关闭代理之后，就可以运行或则是安装相应的python环境</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们慢慢开始长大了</title>
      <link href="/2021/08/15/%E6%88%91%E4%BB%AC%E6%85%A2%E6%85%A2%E5%BC%80%E5%A7%8B%E9%95%BF%E5%A4%A7%E4%BA%86/"/>
      <url>/2021/08/15/%E6%88%91%E4%BB%AC%E6%85%A2%E6%85%A2%E5%BC%80%E5%A7%8B%E9%95%BF%E5%A4%A7%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h1 id="长大"><a href="#长大" class="headerlink" title="长大"></a><strong>长大</strong></h1><p>​        我是1997年出生的一个小毛孩，不，现在不能说是小毛孩了。现在都已经24岁了，今天还穿着本命年该穿的红裤衩。最近一直有一个隐形的声音在我耳旁一直呼唤到“张磊，你已经长大了，父母开始变老了，该你来撑起这个家了”。我思绪万千，不得不承认自己长大了。如果还不想承认的话，那就看看自己身份证上的年龄吧，它是最诚实的。</p><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a><strong>感悟</strong></h1><p>​        我无法避免长大，妹妹今年也都高三了。我想在这个关键的时间段，对自己做出一些改变。我想让自己在一年后找到一份好工作，在两年后顺利毕业。这是我人生中重要的一步。</p><h1 id="怎样做"><a href="#怎样做" class="headerlink" title="怎样做"></a><strong>怎样做</strong></h1>]]></content>
      
      
      <categories>
          
          <category> 个人感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建流程</title>
      <link href="/2021/08/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/08/14/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客搭建流程"><a href="#hexo博客搭建流程" class="headerlink" title="hexo博客搭建流程"></a><strong>hexo博客搭建流程</strong></h1><p>历经三天，我的博客终于达到了能接受的程度，还是挺开心的，因为一直都想写写博客的，一来呢：是为了记录一下自己学习的内容，做好分类。过去的几年自己确实学了不少东西，单片机啊，高数啊，JAVA基础啊，MySQL基础啊，python，数据结构…… 但都因为没有好好的整理与复习，导致自己容易遗忘，实属可惜。趁着暑假这个机会，我铁了心的想搭个博客。二来呢：为了找工作做准备，听说写博客是一个不错的个人名片。</p><p>废话少说，我把这次搭建博客的流程附上（本次安装在window10下操作，linux也差不多）：</p><h1 id="第一大块"><a href="#第一大块" class="headerlink" title="第一大块"></a><strong>第一大块</strong></h1><h2 id="安装hexo模板"><a href="#安装hexo模板" class="headerlink" title="安装hexo模板"></a><a href="https://www.bilibili.com/video/BV1Yb411a7ty">安装hexo模板</a></h2><ol><li><p>安装git工具   <a href="https://git-scm.com/">附上链接</a></p></li><li><p>安装<a href="https://nodejs.org/en/">Nodejs</a></p></li><li><p>创建一个文件夹（blog），在该文件夹下右键，选择git bash.</p><p><img src="/articleImg/second_article/image1.png"></p></li></ol><p>​            4.在git bash中进行如下安装操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">node -v#查看node版本</span><br><span class="line">npm -v#查看npm版本</span><br><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org#安装淘宝的cnpm 管理器</span><br><span class="line">cnpm -v#查看cnpm版本</span><br><span class="line">cnpm install -g hexo-cli    #安装hexo框架</span><br><span class="line">hexo -v#查看hexo版本</span><br><span class="line">mkdir blog#创建blog目录</span><br><span class="line">cd blog #进入blog目录</span><br><span class="line">sudo hexo init #生成博客 初始化博客</span><br><span class="line">hexo s#启动本地博客服务</span><br><span class="line">http://localhost:4000/#本地访问地址</span><br><span class="line">hexo n 我的第一篇文章 #创建新的文章 </span><br><span class="line">#返回blog目录</span><br><span class="line">hexo clean #清理</span><br><span class="line">hexo g #生成</span><br><span class="line">#Github创建一个新的仓库 YourGithubName.github.io</span><br><span class="line">cnpm install --save hexo-deployer-git #在blog目录下安装git部署插件</span><br></pre></td></tr></table></figure><h2 id="配置本地hexo"><a href="#配置本地hexo" class="headerlink" title="配置本地hexo"></a>配置本地hexo</h2><p>这里其实改动的地方也不是很多。</p><p>​        1，配置_config.yml </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line"> repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>​        2，git bash中下载一个自己喜欢的主题，这里我下载的是butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 下载主题</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"># 解决报错 。如果沒有 pug 以及 stylus 的渲染器，还需要下载，否则在项目运行时会报错：</span><br><span class="line">cnpm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        3，若想让自己的主题生效，还得配置博客根目录下的config.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改source\categories文件夹下index.md文件为下面的代码</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-03-04 17:18:32</span><br><span class="line">type: categories</span><br><span class="line">layout: categories   #注意此行不添加则点击不会显示分类结果</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="第二大块"><a href="#第二大块" class="headerlink" title="第二大块"></a><strong>第二大块</strong></h1><h2 id="butterfly的美化"><a href="#butterfly的美化" class="headerlink" title="butterfly的美化"></a>butterfly的美化</h2><p>下面就是butterfly的美化了（主要修改主题文件夹下的config.yml文件），看着别人做的博客，确实很眼馋，自己改了又改，总觉得不满意，有那么一两个钟，我总是和一个样式美化不显示过不去，最后自己用尽对比、排除的方法，都没得到很好的解决。最终发现原来是浏览器没有清理缓存。这里提一句hexo clean 与 hexo c效果不一样,我在这个命令上吃了大亏，不要图省事就输入简写。</p><p>下面推荐几个我使用过的主题美化网站，这里面的博主写的都挺详细的，我在这里也就不重复了。嘻嘻</p><ol><li>首当其冲的肯定是GitHub上该主题的博主，在500多个closed issue中肯定能找到你想要的解决样式问题的答案。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/jerryc127/hexo-theme-butterfly/issues</span><br></pre></td></tr></table></figure><p>​            2.  下面几个网址都是关于美化博客，其他博主写的文章，写的都蛮详细的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 该网址在最下方贴出了很多了美化博客的传递门，可以上车</span><br><span class="line">https://butterfly.js.org/posts/7670b080/</span><br><span class="line"></span><br><span class="line"># 美化主题</span><br><span class="line">https://www.cnblogs.com/MoYu-zc/p/14395965.html</span><br><span class="line"></span><br><span class="line"># 美化主题</span><br><span class="line">https://blog.imzjw.cn/posts/b74f504f/</span><br></pre></td></tr></table></figure><p>​             3.给博客添加一些小功能            </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加评论系统</span><br><span class="line">https://blog.csdn.net/qq_35117024/article/details/107248047</span><br><span class="line"></span><br><span class="line">#添加分类雷达、日历图等数据统计</span><br><span class="line">https://guole.fun/posts/18158/</span><br></pre></td></tr></table></figure><p>​             4.这里记录几个比较好看的博客地址，以后有时间，自己在仿照魔改一下，哈哈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">博主 : 花猪のBlog </span><br><span class="line">https://cnhuazhu.gitee.io/</span><br></pre></td></tr></table></figure><h2 id="第三大块"><a href="#第三大块" class="headerlink" title="第三大块"></a>第三大块</h2><p>这个大块简单记录一些些小问题，以后可能会用到。</p><p>Number one : 首先记录几个命令，每次调试的时候都很实用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 这两个把clean,生成，运行放在一起，省的自己每次要在git bash中输入三次命令。</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s -p 3999</span><br><span class="line"></span><br><span class="line">#这两是创建新的分区时使用</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>这里创建之后有两个问题需要注意，不然你的目录，和分类不会显示！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1：修改source\categories文件夹下index.md文件为下面的代码</span><br><span class="line">        ---</span><br><span class="line">        title: 分类</span><br><span class="line">        date: 2020-03-04 17:18:32</span><br><span class="line">        type: categories</span><br><span class="line">        layout: categories   #注意此行不添加则点击不会显示分类结果</span><br><span class="line">        ---</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2：修改编辑scaffolds/post.md</span><br><span class="line">        ---</span><br><span class="line">        title: &#123;&#123; title &#125;&#125;</span><br><span class="line">        date: &#123;&#123; date &#125;&#125;</span><br><span class="line">        tags: &#123;&#123; tags &#125;&#125;</span><br><span class="line">        ---</span><br><span class="line">scaffolds/draft.md    scaffolds/pages.md 同理</span><br></pre></td></tr></table></figure><p>Number two: 当你不想用https进行 git传送时，可以通过下面的链接更改为SSH传送，我个人感觉SSH传送更稳定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_43768946/article/details/90411154?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</span><br><span class="line"># 脑大 ，这个url怎么这么长....</span><br></pre></td></tr></table></figure><p>Number two: 当你hexo d传送不成功，可能是你的局域网问题吧，在windows -&gt; 控制面板 -&gt; 网络和Internet -&gt; Internet选项 -&gt; 连接 -&gt; 局域网设置  : 在这里取消代理服务器，更改位自动检测。</p><p>​    我就在自动检测和代理服务器这里切换切换，就上传了，大概就是应为传送时被墙的原因。</p><p>暂时先更新到这里吧~ 后面如果有相关优化，我会持续更新</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Linux挂载？</title>
      <link href="/2021/08/13/%E4%BB%80%E4%B9%88%E6%98%AFLinux%E6%8C%82%E8%BD%BD%EF%BC%9F/"/>
      <url>/2021/08/13/%E4%BB%80%E4%B9%88%E6%98%AFLinux%E6%8C%82%E8%BD%BD%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是挂载？mount的用处在哪？"><a href="#什么是挂载？mount的用处在哪？" class="headerlink" title="什么是挂载？mount的用处在哪？"></a>什么是挂载？mount的用处在哪？</h1><p>1.提一句Windows下，mount挂载，就是给磁盘分区提供一个盘符（C,D,E,…）。比如插入U盘后系统自动分配给了它I:盘符其实就是挂载，退优盘的时候进行安全弹出，其实就是卸载unmount。</p><p>2.Linux下，不像Windows可以有C,D,E,多个目录，Linux只有一个根目录/。在装系统时，我们分配给linux的所有区都在/下的某个位置，比如/home等等。</p><p>3.提问者插入了新硬盘，分了新磁盘区sdb1。它现在还不属于/。</p><p>4.我们虽然可以在一些图形桌面系统里找到他的位置，浏览管理里面的文件，但在命令行却不知怎么访问它的目录，比如无法使用cd或者ls。也无法在编程时指定一个目录对它操作。</p><p>5.这时提问者使用了 mount /dev/sdb1 <del>/Share/ ，把新硬盘的区sdb1挂载到工作目录的</del>/Share/文件夹下，之后访问这个~/Share/文件夹就相当于访问这个硬盘2的sdb1分区了。对/Share/的任何操作，都相当于对sdb1里文件的操作。</p><p>6.所以Linux下，<span style='color:fuchsia'>mount挂载的作用，就是将一个设备（通常是存储设备）挂接到一个已存在的目录上。访问这个目录就是访问该存储设备。</span></p><p>7.linux将整个计算机的资源都整合成一个大的文件目录。我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。<span style='color:fuchsia'>挂载就是把设备放在一个目录下，让系统知道怎么管理这个设备里的文件，了解这个存储设备的可读写特性之类的过程。</span></p><p>8.我们不是有/dev/sdb1 吗，直接对它操作不就行了？这不是它的目录吗？</p><p>9.这不是它的目录。虽然/dev是个目录，但/dev/sdb1不是目录。可以发现ls/dev/sdb1无法执行。/dev/sdb1，是一个类似指针的东西，指向这个分区的原始数据块。mount前，系统并不知道这个数据块哪部分数据代表文件，如何对它们操作。</p><p>10.插入CD，系统其实自动执行了 mount /dev/cdrom /media/cdrom。所以可以直接在/media/cdrom中对CD中的内容进行管理。</p><p>总结来说：挂载就是把设备（如U盘）加入到linux现有目录下，进而可以进行相应的管理。</p><p style='color:fuchsia'>不挂载的话久会造成无法使用cd或者ls等一系列命令。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mount </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/12/hello-world/"/>
      <url>/2021/08/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
